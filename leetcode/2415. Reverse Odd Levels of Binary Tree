# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# Time complexity: O(n)
# Space complexity: O(logn))

class Solution:
    def reverseOddLevels(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        def traverse_mirror_DFS(left: TreeNode, right: TreeNode, level):
            if not left or not right:
                return
            # Check for odd levels
            if level % 2 == 1:
                left.val , right.val = right.val , left.val

            traverse_mirror_DFS(left.left, right.right,level+1)
            traverse_mirror_DFS(left.right, right.left,level+1)
            
        traverse_mirror_DFS(root.left,root.right,1)
        return root


         
        
